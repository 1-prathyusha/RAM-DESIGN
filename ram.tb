'timescale 1ns/1ps

module tb_simple_sync_ram;

    parameter DATA_WIDTH = 8;
    parameter ADDR_WIDTH = 4;

    reg clk;
    reg we;
    reg [ADDR_WIDTH-1:0] addr;
    reg [DATA_WIDTH-1:0] din;
    wire [DATA_WIDTH-1:0] dout;

    // Instantiate RAM
    simple_sync_ram #(DATA_WIDTH, ADDR_WIDTH) ram_inst (
        .clk(clk),
        .we(we),
        .addr(addr),
        .din(din),
        .dout(dout)
    );

    // Clock generation (10 ns period)
    initial clk = 0;
    always #5 clk = ~clk;

    initial begin
        // Initialize inputs
        we = 0; addr = 0; din = 0;

        // Wait for a few clock cycles
        #20;

        // === Write data to address 3 ===
        @(posedge clk);
        we = 1; addr = 4'd3; din = 8'hAA;

        // === Write data to address 7 ===
        @(posedge clk);
        we = 1; addr = 4'd7; din = 8'h55;

        // === Disable write, allow data to stabilize ===
        @(posedge clk);
        we = 0;

        // === Read from address 3 ===
        @(posedge clk);
        addr = 4'd3;

        // Wait one cycle for read result
        @(posedge clk);

        // === Read from address 7 ===
        @(posedge clk);
        addr = 4'd7;

        // Wait one cycle for read result
        @(posedge clk);

        // === Read from address 0 (should be 0) ===
        @(posedge clk);
        addr = 4'd0;

        // Wait one cycle for read result
        @(posedge clk);

        // Finish after a few extra cycles
        #20;
        $finish;
    end

    initial begin
        $dumpfile("ram_waveform.vcd"); // For GTKWave
        $dumpvars(0, tb_simple_sync_ram);
    end

endmodule
 
